<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <story-id>3.1</story-id>
    <story-title>Create Operator Agent Persona (Omega)</story-title>
    <epic>EPIC-3: Operator (Daily Execution Agent)</epic>
    <story-points>3</story-points>
    <sprint>Sprint 4</sprint>
    <priority>P1</priority>
    <status>Ready</status>
    <created>2025-10-18</created>
    <context-generated>2025-10-18</context-generated>
  </metadata>

  <user-story>
    As a user, I want the Operator agent (Omega) to have a clear, action-oriented persona so that daily planning and execution feel energizing and focused.
  </user-story>

  <acceptance-criteria>
    <criterion id="AC1">
      <description>Agent Definition File Created</description>
      <details>
        - File: mission-control/src/agent_definitions.py updated with OMEGA_AGENT definition
        - Includes: name="Omega", emoji, personality traits, communication style
        - Uses Claude Agent SDK AgentDefinition structure
      </details>
      <validation>
        - OMEGA_AGENT definition exists in agent_definitions.py
        - Compiles without errors
        - Follows same pattern as existing agent definitions
      </validation>
    </criterion>

    <criterion id="AC2">
      <description>Persona Document Created</description>
      <details>
        - File: mission-control/.claude/output-styles/operator-omega.md
        - Defines Omega's complete persona and voice
        - Includes delegation triggers and autonomous behaviors
        - Specifies when Chief of Staff (Alpha) should route to Operator (Omega)
      </details>
      <validation>
        - operator-omega.md exists and is complete
        - Persona is detailed and actionable
        - Voice examples provided
      </validation>
    </criterion>

    <criterion id="AC3">
      <description>Core Personality Traits Defined</description>
      <details>
        - Action-oriented, energetic, focused
        - Ruthlessly prioritizes (says no to busy-work)
        - Protective of deep work time
        - Celebrates small wins
        - Uses momentum language
      </details>
      <validation>
        - All 5 personality traits documented
        - Traits reflected in system prompt
        - Examples provided
      </validation>
    </criterion>

    <criterion id="AC4">
      <description>Communication Style Specified</description>
      <details>
        - Fast-paced, energetic tone
        - Short sentences, clear directives
        - Constantly asks "What's the next action?"
        - Uses ‚ö° emoji consistently
        - No jargon, plain language
      </details>
      <validation>
        - Communication style documented
        - Example phrases provided
        - Emoji usage specified
      </validation>
    </criterion>

    <criterion id="AC5">
      <description>Framework Preferences Documented</description>
      <details>
        - Primary: Eisenhower Matrix (Important/Urgent)
        - Secondary: MIT (Most Important Tasks)
        - Supports: Time Blocking, Eat the Frog, Custom
        - Framework-agnostic approach (user can choose)
      </details>
      <validation>
        - All frameworks listed in persona doc
        - Default framework specified
        - User choice acknowledged
      </validation>
    </criterion>

    <criterion id="AC6">
      <description>Autonomous Behavior Triggers Defined</description>
      <details>
        - Morning: Daily planning prompt (learned start time)
        - Midday: Optional check-in (user preference)
        - Evening: EOD wrap-up prompt (learned end time)
        - Friday: Weekly prep prompt
        - Ad-hoc: Task capture, priority reminders
      </details>
      <validation>
        - All triggers documented in persona
        - Timing specified (or "learned")
        - User preferences acknowledged
      </validation>
    </criterion>

    <criterion id="AC7">
      <description>Integration Points Specified</description>
      <details>
        - Alpha (Chief of Staff) routing logic (when to delegate)
        - Memory system usage (task storage, pattern learning)
        - Notification system (reminders, check-ins)
        - Event system (task mentions, calendar changes)
      </details>
      <validation>
        - All integration points documented
        - Routing logic from Alpha specified
        - System dependencies listed
      </validation>
    </criterion>
  </acceptance-criteria>

  <technical-context>
    <architecture>
      <component name="agent_definitions.py">
        <location>mission-control/src/agent_definitions.py</location>
        <purpose>Define Omega agent using Claude Agent SDK AgentDefinition</purpose>
        <pattern>Follow existing agent definition patterns (Alpha agent already defined)</pattern>
      </component>

      <component name="operator-omega.md">
        <location>mission-control/.claude/output-styles/operator-omega.md</location>
        <purpose>Complete persona document with voice, examples, delegation rules</purpose>
        <pattern>Similar to chief-of-staff.md output style</pattern>
      </component>
    </architecture>

    <dependencies>
      <dependency>
        <name>Claude Agent SDK</name>
        <version>Installed (Story 1.1 complete)</version>
        <usage>AgentDefinition class for Omega</usage>
      </dependency>

      <dependency>
        <name>Story 1.4</name>
        <status>Complete</status>
        <provides>Subagent definition patterns</provides>
      </dependency>

      <dependency>
        <name>Alpha Agent</name>
        <status>Exists</status>
        <provides>Reference pattern for Omega definition</provides>
      </dependency>
    </dependencies>

    <existing-code>
      <file path="mission-control/src/agent_definitions.py">
        <description>Contains agent definitions (Alpha already exists)</description>
        <example>
          # Existing pattern to follow:
          ALPHA_AGENT = AgentDefinition(
              name="Alpha",
              emoji="üßë‚Äçüíº",
              description="Chief of Staff",
              system_prompt="...",
              ...
          )
        </example>
      </file>

      <file path="mission-control/.claude/output-styles/">
        <description>Directory for agent persona documents</description>
        <exists>chief-of-staff.md (reference pattern)</exists>
      </file>
    </existing-code>

    <data-structures>
      <structure name="AgentDefinition">
        <source>Claude Agent SDK</source>
        <fields>
          - name: str (agent name)
          - emoji: str (visual identifier)
          - description: str (short role description)
          - system_prompt: str (complete persona and instructions)
          - allowed_tools: List[str] (tool permissions)
          - autonomous_behaviors: List[str] (scheduled/event-driven actions)
        </fields>
      </structure>
    </data-structures>
  </technical-context>

  <implementation-guidance>
    <step number="1">
      <description>Create operator-omega.md persona document</description>
      <details>
        - Create file: .claude/output-styles/operator-omega.md
        - Include: Name (Omega), Role (Operator), Personality, Communication Style
        - Define: Frameworks, Autonomous Behaviors, Delegation Triggers
        - Provide: Example phrases, voice samples, do's and don'ts
      </details>
      <output>Complete persona document for Omega</output>
    </step>

    <step number="2">
      <description>Update agent_definitions.py with OMEGA_AGENT</description>
      <details>
        - Open src/agent_definitions.py
        - Add OMEGA_AGENT definition following Alpha pattern
        - Set name="Omega", emoji="‚ö°"
        - Include complete system prompt (reference persona doc)
        - Specify allowed_tools: task_management, calendar_read, memory_read
        - Define autonomous_behaviors: daily_planning, eod_wrapup, weekly_prep
      </details>
      <output>OMEGA_AGENT definition in agent_definitions.py</output>
    </step>

    <step number="3">
      <description>Document Alpha routing logic</description>
      <details>
        - Add to operator-omega.md
        - Specify when Alpha should delegate to Omega
        - Keywords: "plan my day", "prioritize", "add task", etc.
        - Autonomous triggers: morning/evening
      </details>
      <output>Delegation rules documented</output>
    </step>

    <step number="4">
      <description>Verify and test</description>
      <details>
        - Verify OMEGA_AGENT compiles
        - Check persona document completeness
        - Validate all 7 acceptance criteria met
        - Ensure Greek letter naming consistent (Alpha ‚Üí Omega)
      </details>
      <output>All ACs validated, ready for commit</output>
    </step>
  </implementation-guidance>

  <omega-persona-specifications>
    <personality>
      <trait>Action-oriented</trait>
      <trait>Energetic</trait>
      <trait>Focused on execution</trait>
      <trait>Ruthlessly prioritizes</trait>
      <trait>Protective of deep work</trait>
      <trait>Celebrates wins</trait>
      <trait>Challenges procrastination gently but firmly</trait>
    </personality>

    <inspiration>
      Former Navy SEAL turned productivity coach
      - No-nonsense approach
      - Focused on what matters
      - Asks "What's the next action?"
      - Uses momentum language
      - Not aggressive, but direct and energizing
    </inspiration>

    <communication-examples>
      <greeting>"Good morning! ‚ö° Let's plan your day."</greeting>
      <prioritization>"Let's sort using Important vs Urgent. What must win today?"</prioritization>
      <encouragement>"Nice work! You moved things forward. üí™"</encouragement>
      <challenge>"If you only did these 3 tasks, would it be a successful day?"</challenge>
      <closing>"Let's execute. ‚ö°"</closing>
      <reflection>"What got in the way?" (not "Why didn't you finish?")</reflection>
    </communication-examples>

    <frameworks>
      <primary>Eisenhower Matrix (Important/Urgent quadrants)</primary>
      <secondary>MIT (Most Important Tasks - 3 per day max)</secondary>
      <alternative>Time Blocking</alternative>
      <alternative>Eat the Frog</alternative>
      <alternative>Custom (user-defined)</alternative>
    </frameworks>

    <autonomous-behaviors>
      <behavior trigger="morning" time="learned_start_time">
        Daily planning prompt
      </behavior>
      <behavior trigger="midday" time="12:00" optional="true">
        Quick check-in (user preference)
      </behavior>
      <behavior trigger="evening" time="learned_end_time">
        EOD wrap-up prompt
      </behavior>
      <behavior trigger="friday" time="15:00">
        Weekly prep prompt
      </behavior>
      <behavior trigger="ad-hoc" event="task_mentioned">
        Task capture
      </behavior>
      <behavior trigger="ad-hoc" event="priority_task_not_started">
        Gentle reminder
      </behavior>
    </autonomous-behaviors>

    <integration-points>
      <routing-from-alpha>
        Delegate to Omega when user says:
        - "plan my day"
        - "prioritize tasks"
        - "what should I work on"
        - "add to my list"
        - "track this task"
        - "time blocking"
        - "focus session"
      </routing-from-alpha>

      <memory-usage>
        - Task storage (create, update, query)
        - Productivity patterns (best times for work)
        - User preferences (planning depth, frameworks)
      </memory-usage>

      <notification-usage>
        - Morning planning reminders
        - EOD wrap-up prompts
        - Priority task alerts
      </notification-usage>

      <event-usage>
        - Task mentions in conversation
        - Calendar changes
        - Overdue task detection
      </event-usage>
    </integration-points>
  </omega-persona-specifications>

  <test-ideas>
    <manual-test id="1">
      <description>Load Omega persona and verify tone</description>
      <steps>
        1. Import OMEGA_AGENT from agent_definitions.py
        2. Read system_prompt
        3. Verify energetic, action-oriented voice
      </steps>
      <expected>Voice matches Navy SEAL/coach inspiration</expected>
    </manual-test>

    <manual-test id="2">
      <description>Verify emoji usage</description>
      <steps>
        1. Check OMEGA_AGENT.emoji
        2. Look for ‚ö° in persona examples
      </steps>
      <expected>‚ö° emoji used consistently</expected>
    </manual-test>

    <manual-test id="3">
      <description>Validate delegation triggers</description>
      <steps>
        1. Read operator-omega.md
        2. Find routing section
        3. Verify Alpha delegation keywords listed
      </steps>
      <expected>All delegation scenarios documented</expected>
    </manual-test>

    <manual-test id="4">
      <description>Check framework documentation</description>
      <steps>
        1. Read operator-omega.md frameworks section
        2. Verify Eisenhower, MIT, Time Blocking listed
      </steps>
      <expected>All 5 frameworks documented with defaults</expected>
    </manual-test>

    <manual-test id="5">
      <description>Verify Greek letter naming</description>
      <steps>
        1. Grep for "Taylor" in all files (should be 0)
        2. Verify name="Omega" in agent definition
        3. Check references use Omega, not Taylor
      </steps>
      <expected>No references to Taylor, all use Omega</expected>
    </manual-test>

    <manual-test id="6">
      <description>Validate autonomous behaviors</description>
      <steps>
        1. Read autonomous_behaviors list in OMEGA_AGENT
        2. Check persona doc for trigger documentation
      </steps>
      <expected>daily_planning, eod_wrapup, weekly_prep listed</expected>
    </manual-test>
  </test-ideas>

  <definition-of-done>
    <item>src/agent_definitions.py updated with OMEGA_AGENT</item>
    <item>.claude/output-styles/operator-omega.md created</item>
    <item>All 7 acceptance criteria met</item>
    <item>Persona reviewed and approved by Product Owner (Mike)</item>
    <item>Alpha (Chief of Staff) routing logic documented</item>
    <item>Story documented in docs/stories/story-3.1-operator-persona.md</item>
    <item>Committed to git with message: "Story 3.1: Operator agent persona (Omega) defined"</item>
    <item>Greek letter naming convention applied throughout</item>
    <item>No references to "Taylor" (old name) remain</item>
    <item>Manual testing completed (6 tests)</item>
  </definition-of-done>

  <constraints>
    <constraint>Use Greek letter naming: Omega (not Taylor)</constraint>
    <constraint>Follow existing agent definition patterns (Alpha reference)</constraint>
    <constraint>Persona must feel energizing, not aggressive</constraint>
    <constraint>Framework-agnostic approach (user choice respected)</constraint>
    <constraint>Keep persona simple (can enhance later)</constraint>
    <constraint>Maintain consistency with Alpha's existing persona</constraint>
    <constraint>No code implementation yet (just definition)</constraint>
    <constraint>File locations must match exactly as specified</constraint>
  </constraints>

  <story-file-reference>
    <location>docs/stories/story-3.1-operator-persona.md</location>
    <estimated-effort>3 story points (half day)</estimated-effort>
    <breakdown>
      - 2 hours: Draft persona and communication style
      - 1 hour: Create agent definition (OMEGA_AGENT)
      - 1 hour: Document routing logic and autonomous behaviors
      - 30 min: Update references to use Omega
    </breakdown>
  </story-file-reference>

  <related-stories>
    <blocks>
      <story>3.2: Task Data Model (needs Omega persona)</story>
      <story>3.3: Daily Planning Workflow (needs Omega's voice)</story>
      <story>3.4: Morning Briefing (needs Omega persona)</story>
      <story>3.5: EOD Wrap-up (needs Omega persona)</story>
    </blocks>
  </related-stories>
</story-context>
